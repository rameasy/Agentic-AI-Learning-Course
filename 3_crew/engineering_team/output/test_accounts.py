import unittest\nfrom accounts import Account\n\nclass TestAccount(unittest.TestCase):\n    def setUp(self):\n        self.account = Account('test_user', 1000)\n\n    def test_initialization(self):\n        self.assertEqual(self.account.username, 'test_user')\n        self.assertEqual(self.account.balance, 1000)\n        self.assertEqual(self.account.holdings, {})\n        self.assertEqual(self.account.transactions, [])\n\n    def test_deposit(self):\n        self.account.deposit(500)\n        self.assertEqual(self.account.balance, 1500)\n        self.assertEqual(self.account.transactions, [('deposit', 500)])\n        with self.assertRaises(ValueError):\n            self.account.deposit(-100)\n\n    def test_withdraw(self):\n        self.account.withdraw(200)\n        self.assertEqual(self.account.balance, 800)\n        self.assertEqual(self.account.transactions, [('deposit', 500), ('withdraw', 200)])\n        with self.assertRaises(ValueError):\n            self.account.withdraw(1000)\n        with self.assertRaises(ValueError):\n            self.account.withdraw(-50)\n\n    def test_buy_shares(self):\n        self.account.buy_shares('AAPL', 2)\n        self.assertEqual(self.account.holdings, {'AAPL': 2})\n        self.assertEqual(self.account.balance, 700)\n        self.assertEqual(self.account.transactions[-1], ('buy', 'AAPL', 2))\n        with self.assertRaises(ValueError):\n            self.account.buy_shares('GOOGL', 10)\n        with self.assertRaises(ValueError):\n            self.account.buy_shares('AAPL', -1)\n\n    def test_sell_shares(self):\n        self.account.buy_shares('TSLA', 1)\n        self.account.sell_shares('TSLA', 1)\n        self.assertEqual(self.account.holdings, {})\n        self.assertEqual(self.account.balance, 700 + 700)\n        with self.assertRaises(ValueError):\n            self.account.sell_shares('TSLA', 2)\n        with self.assertRaises(ValueError):\n            self.account.sell_shares('TSLA', -1)\n\n    def test_calculate_portfolio_value(self):\n        self.account.buy_shares('AAPL', 2)\n        self.assertEqual(self.account.calculate_portfolio_value(), 700 + 150.0 * 2)\n\n    def test_calculate_profit_loss(self):\n        self.account.buy_shares('AAPL', 2)\n        profit_loss = self.account.calculate_profit_loss()\n        self.assertEqual(profit_loss, (700 + 150.0 * 2) - (150.0 * 2))\n\n    def test_report_holdings(self):\n        self.account.buy_shares('AAPL', 3)\n        self.assertEqual(self.account.report_holdings(), {'AAPL': 3})\n\n    def test_list_transactions(self):\n        self.account.deposit(500)\n        self.account.withdraw(200)\n        self.assertEqual(self.account.list_transactions(), [('deposit', 500), ('withdraw', 200)])\n\nif __name__ == '__main__':\n    unittest.main()